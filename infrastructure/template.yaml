AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "mainichi-homeru - ベイスターズ応援ブログAPI"

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        S3_BUCKET_NAME: !Ref ArticlesBucket
        CLAUDE_API_KEY_PARAMETER: !Ref ClaudeApiKeyParameterName
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,Access-Control-Allow-Headers,Access-Control-Allow-Methods'"
      AllowOrigin: "'*'"

Parameters:
  ClaudeApiKeyParameterName:
    Type: String
    Description: SSM Parameter name for Claude API Key
    Default: "/mainichi-homeru/claude-api-key"

Resources:
  # S3 Bucket for storing articles
  ArticlesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-articles-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ArticlesBucket}/*"
                  - !Sub "arn:aws:s3:::${ArticlesBucket}"
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mainichi-homeru/claude-api-key"
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:ListFunctions
                  - lambda:InvokeFunction
                Resource: 
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                  - "*"

  # API Gateway
  MainichiHomeruApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Description: API for mainichi-homeru blog
      Auth:
        ApiKeyRequired: true

  # Lambda Functions
  GetArticlesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/get_articles/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetArticles:
          Type: Api
          Properties:
            RestApiId: !Ref MainichiHomeruApi
            Path: /api/articles
            Method: get
        GetArticlesOptions:
          Type: Api
          Properties:
            RestApiId: !Ref MainichiHomeruApi
            Path: /api/articles
            Method: options
            Auth:
              ApiKeyRequired: false

  GetArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/get_article/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetArticle:
          Type: Api
          Properties:
            RestApiId: !Ref MainichiHomeruApi
            Path: /api/articles/{date}
            Method: get
        GetArticleOptions:
          Type: Api
          Properties:
            RestApiId: !Ref MainichiHomeruApi
            Path: /api/articles/{date}
            Method: options
            Auth:
              ApiKeyRequired: false

  GenerateArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/generate_article/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Events:
        ScheduledGeneration:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *) # 毎日午前9時JST（UTC 0時）
            Description: "Daily article generation"
            Enabled: true # 定期実行有効

  FetchGameInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/fetch_game_info/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Events:
        FetchGameInfo:
          Type: Api
          Properties:
            RestApiId: !Ref MainichiHomeruApi
            Path: /api/game-info
            Method: get

  MCPOrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/mcp_orchestrator/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      Description: "MCP-based article generation with multi-agent system"
      Events:
        ScheduledMCPGeneration:
          Type: Schedule
          Properties:
            Schedule: cron(30 0 * * ? *) # 毎日午前9時30分JST（UTC 0時30分）
            Description: "Daily MCP article generation"
            Enabled: true

  # API Key for security
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: mainichi-homeru-api-key
      Description: API key for mainichi-homeru blog
      Enabled: true

  # Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: mainichi-homeru-usage-plan
      Description: Usage plan for mainichi-homeru blog
      Throttle:
        RateLimit: 100
        BurstLimit: 200
      Quota:
        Limit: 1000
        Period: DAY
      ApiStages:
        - ApiId: !Ref MainichiHomeruApi
          Stage: prod

  # Usage Plan Key
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MainichiHomeruApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  S3BucketName:
    Description: "S3 bucket name for articles"
    Value: !Ref ArticlesBucket
    Export:
      Name: !Sub "${AWS::StackName}-BucketName"

  ApiKeyId:
    Description: "API Key ID for the mainichi-homeru API"
    Value: !Ref ApiKey
    Export:
      Name: !Sub "${AWS::StackName}-ApiKeyId"
